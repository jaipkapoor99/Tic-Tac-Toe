import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";
import { buttonVariants } from "./button-variants";

/**
 * Props for the Button component.
 * Extends standard HTML button attributes and variant props defined by cva.
 */
export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  /**
   * If true, the button will render as a child component (Slot),
   * merging its props and behavior with the child.
   */
  asChild?: boolean;
}

/**
 * Button component, generated by Shadcn/ui.
 * A flexible and stylable button that supports various visual variants and sizes.
 * Can also render as a child component using the `asChild` prop.
 */
const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  }
);
Button.displayName = "Button";

export { Button };
